<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.vivantech</groupId>
	<artifactId>kc_fixes</artifactId>
	<packaging>war</packaging>
	<version>5.2.1-fixes-000</version>
	<name>Kuali Coeus with fixes from Vivantech</name>
	<url>http://www.vivantech.com</url>

	<dependencies>
		<dependency>
			<groupId>org.kuali.kra</groupId>
			<artifactId>kc_project</artifactId>
			<version>5.2.1</version>
			<type>jar</type>
			<classifier>classes</classifier>
		</dependency>
		<dependency>
			<groupId>org.kuali.kra</groupId>
			<artifactId>kc_project</artifactId>
			<version>5.2.1</version>
			<type>war</type>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
  			<version>2.5</version>
  			<scope>provided</scope>
		</dependency>
	</dependencies>
	
	<build>
		<plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<attachClasses>true</attachClasses>
					<overlays>
						<overlay>
							<groupId>org.kuali.kra</groupId>
							<artifactId>kc_project</artifactId>
						</overlay>
					</overlays>
					<!--
						Included the kc_project classes jar as a compile-scope dependency so its
						transitive dependencies remain intact for projects including this one as
						a dependency.  However, having the jar in the lib directory can cause
						complications for projects using this one in a war overlay.  So we can
						exclude the jar from packaging since its contents are already brought in
						by the overlay.

						Note: packagingExcludes removes the artifact from the built war, but it 
						will still be present in the temporary war directory 
					-->
					<packagingExcludes>WEB-INF/lib/kc_project-*-classes.jar</packagingExcludes>
				</configuration>
			</plugin>

            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.1</version>
                <configuration>
                    <port>8080</port>
                    <path>/kc-dev</path>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>5.1.16</version>
                        <scope>runtime</scope>
                    </dependency>
                </dependencies>
            </plugin>

		</plugins>
	</build>

	<repositories>
		<repository>
			<id>ekualiti-public</id>
			<name>Public Maven Repository for ekualiti(TM) by Vivantech, Inc.</name>
			<url>https://jenkins.dev.ekualiti.com/nexus/content/repositories/public/</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
			<releases>
				<enabled>true</enabled>
			</releases>
		</repository>
	</repositories>
</project>
